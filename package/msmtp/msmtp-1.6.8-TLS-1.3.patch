From ec043e5375d0ecd5ab987e53d0ebfecfc1de0858 Mon Sep 17 00:00:00 2001
From: Martin Lambers <marlam@marlam.de>
Date: Sat, 8 Dec 2018 11:22:52 +0100
Subject: Fix handling of GNUTLS_E_AGAIN in tls.c, for TLS 1.3 support.

GNUTLS_E_AGAIN was never handled correctly, but since GnuTLS never actually
returned that code before GnuTLS 3.6.x with TLS 1.3, this was never a problem.

Reported and analyzed by Florian Pritz (thank you!)

https://marlam.de/msmtp/Fix-handling-of-GNUTLS_E_AGAIN-in-tls.c-for-TLS-1.3.patch
---
 src/tls.c | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/tls.c b/src/tls.c
index 0c1e77f..4e87a87 100644
--- a/src/tls.c
+++ b/src/tls.c
@@ -1516,21 +1516,18 @@ int tls_readbuf_read(tls_t *tls, readbuf_t *readbuf, char *ptr,
 
     if (readbuf->count <= 0)
     {
-        ret = (int)gnutls_record_recv(tls->session,
-                readbuf->buf, sizeof(readbuf->buf));
+        do
+        {
+            ret = gnutls_record_recv(tls->session,
+                    readbuf->buf, sizeof(readbuf->buf));
+        }
+        while (ret == GNUTLS_E_AGAIN);
         if (ret < 0)
         {
             if (ret == GNUTLS_E_INTERRUPTED)
             {
                 *errstr = xasprintf(_("operation aborted"));
             }
-            else if (ret == GNUTLS_E_AGAIN)
-            {
-                /* This error message makes more sense than what
-                 * gnutls_strerror() would return. */
-                *errstr = xasprintf(_("cannot read from TLS connection: %s"),
-                        _("the operation timed out"));
-            }
             else
             {
                 *errstr = xasprintf(_("cannot read from TLS connection: %s"),
@@ -1650,19 +1647,17 @@ int tls_puts(tls_t *tls, const char *s, size_t len, char **errstr)
         return TLS_EOK;
     }
 
-    if ((ret = gnutls_record_send(tls->session, s, len)) < 0)
+    do
+    {
+        ret = gnutls_record_send(tls->session, s, len);
+    }
+    while (ret == GNUTLS_E_AGAIN);
+    if (ret < 0)
     {
         if (ret == GNUTLS_E_INTERRUPTED)
         {
             *errstr = xasprintf(_("operation aborted"));
         }
-        else if (ret == GNUTLS_E_AGAIN)
-        {
-            /* This error message makes more sense than what
-             * gnutls_strerror() would return. */
-            *errstr = xasprintf(_("cannot write to TLS connection: %s"),
-                    _("the operation timed out"));
-        }
         else
         {
             *errstr = xasprintf(_("cannot write to TLS connection: %s"),
@@ -1728,7 +1723,12 @@ void tls_close(tls_t *tls)
     if (tls->is_active)
     {
 #ifdef HAVE_LIBGNUTLS
-        gnutls_bye(tls->session, GNUTLS_SHUT_WR);
+        int e;
+        do
+        {
+            e = gnutls_bye(tls->session, GNUTLS_SHUT_WR);
+        }
+        while (e == GNUTLS_E_AGAIN);
         gnutls_deinit(tls->session);
         gnutls_certificate_free_credentials(tls->cred);
 #endif /* HAVE_LIBGNUTLS */
-- 
2.20.0.rc1

