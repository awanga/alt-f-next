#!/bin/bash

#set -x

# customize root directory

# script called by buildroot after packages are installed in root dir, but
# before the root filesystem is built

# 1-during install some packages install undesired files in root.
# the files to remove from root before creating the filesystem:
# this should be fixed in buildroot and packages.mk

RMF="etc/default/ntpd etc/random-seed
etc/init.d/S20urandom etc/init.d/S99at etc/init.d/S13portmap etc/init.d/S40network etc/init.d/S50dropbear etc/init.d/S49ntp etc/init.d/S70vsftpd etc/init.d/S91smb
etc/init.d/S30dbus
sbin/fsck.ext4dev sbin/mkfs.ext4dev
usr/bin/ntpdate
var/spool var/log var/cache var/run var/pcmcia var/lib var/lock
usr/doc usr/share/locale usr/swat/lang 
lib/udev lib/firmware"

echo configfs:
#(cd $1; ls $RMF)

. .config 2> /dev/null
board=$BR2_PROJECT

if test -z "$BR2_KERNEL_none"; then
	if test -n "$BR2_KERNEL_THIS_VERSION"; then
		kver=$BR2_KERNEL_THIS_VERSION.$BR2_KERNEL_PATCH_LEVEL	
	else
		kver=$BR2_CUSTOM_LINUX26_VERSION
	fi

echo kernel=$kver

	# FIXME THE FIRST make will reinstall modules (linux26 is a late target),
	# so TWO makes have to be done the first time!!! Isn't this already solved?

	# the kernel modules in the base firmware:
	#KMOD="./kernel/fs/nfs/nfsv2.ko "  
	KMOD="
./kernel/fs/ext2/ext2.ko
./kernel/drivers/usb/class/usblp.ko
./kernel/fs/cifs/cifs.ko ./kernel/crypto/md4.ko ./kernel/crypto/md5.ko ./kernel/crypto/arc4.ko
./kernel/fs/fuse/fuse.ko
./kernel/fs/nfs/nfsv3.ko ./kernel/fs/nfs/nfs.ko ./kernel/fs/nfsd/nfsd.ko ./kernel/fs/exportfs/exportfs.ko ./kernel/fs/lockd/lockd.ko ./kernel/net/sunrpc/sunrpc.ko ./kernel/fs/nfs_common/grace.ko"

	if test -z "$BR2_PACKAGE_KERNEL_MODULES"; then
		if ! test -d $BLDDIR/project_build_arm/$board/root/lib/modules/$kver; then
			echo "configfs: kernel modules dir does not exists!"
		else
			RMF="$RMF lib/libthread_db*"
			OPWD=$PWD
			cd $BLDDIR/project_build_arm/$board/root/lib/modules/$kver
			echo "configfs: removing unwanted kernel modules (total: $(find . -name \*.ko | wc -l))"
			echo "configfs: and keeping $(echo $KMOD | wc -w) wanted kernel modules"
			# remove unwanted kernel modules
			for i in $(find . -name \*.ko); do
				if ! echo $KMOD | grep -q $i; then
					rm -f $i
				fi
			done
			find . -depth -type d -empty -exec rmdir {} \;
			
			# strip modules.* of inexistent modules
			for i in $(cat modules.order); do
				if ! test -f $i; then
					f=$(basename $i)
					s1=$(basename $i .ko)
					s2=$(echo $s1 | tr '-' '_')
					#echo "-------> $f"
					sed -i "\|$i|d" modules.order
					sed -i "\|/$f:|d" modules.dep
					sed -i -e "\|$s1$|d" -e "\|$s2$|d" modules.symbols
					sed -i -e "\|$s1$|d" -e "\|$s2$|d" modules.alias
					sed -i -e "\|^$s1[[:space:]]*|d" -e "\|^$s2[[:space:]]*|d" modules.usbmap
				fi
			done

			for i in $(cut -f1 -d: modules.dep); do
				if ! test -f $1/$i; then
					sed -i "\|^$i:|d" modules.dep
					#echo $i
				fi
			done
			cd $OPWD
		fi
	fi
fi

# 2-customroot has additional needed files, copy them to root
find customroot/ \( -name \*~ -o -name .directory -o -name \.*kate-swp \) -delete
cp -a --remove-destination customroot/* $1/
find $1 -depth -name .svn -exec rm -rf {} \;

# 3-but some files in customroot might belong to packages not currently
# configured, remove them in this case
BR2_PACKAGES="BR2_PACKAGE_MDADM BR2_PACKAGE_DNSMASQ BR2_PACKAGE_WGET BR2_PACKAGE_RSYNC BR2_PACKAGE_NTP BR2_PACKAGE_MSMTP BR2_PACKAGE_TRANSMISSION BR2_PACKAGE_USHARE BR2_PACKAGE_MEDIATOMB BR2_PACKAGE_FUPPES BR2_PACKAGE_MINIDLNA BR2_PACKAGE_MT_DAAPD BR2_PACKAGE_CUPS BR2_PACKAGE_SAMBA_DOC BR2_PACKAGE_NTFS_3G_NTFSPROGS BR2_PACKAGE_AVAHI BR2_PACKAGE_NETATALK BR2_PACKAGE_AUTOMATIC BR2_PACKAGE_FORKED_DAAPD BR2_PACKAGE_DBUS BR2_PACKAGE_ISCSITARGET BR2_PACKAGE_LVM2 BR2_PACKAGE_LVM2_DEVICE_MAPPER BR2_PACKAGE_CRYPTSETUP BR2_PACKAGE_STUNNEL BR2_PACKAGE_KERNEL_MODULES BR2_PACKAGE_LIGHTTPD
BR2_PACKAGE_PHP BR2_PACKAGE_SICKBEARD BR2_PACKAGE_SABNZBD BR2_PACKAGE_COUCHPOTATO BR2_PACKAGE_COUCHPOTATO2 BR2_PACKAGE_NZBGET BR2_PACKAGE_NZBGETWEB BR2_PACKAGE_POLIPO BR2_PACKAGE_MPD BR2_PACKAGE_QUOTA_TOOLS BR2_PACKAGE_OPENVPN BR2_PACKAGE_AMULE BR2_PACKAGE_ARIA2 BR2_PACKAGE_NUTS BR2_PACKAGE_MYSQL BR2_PACKAGE_PPTPD BR2_PACKAGE_PYLOAD BR2_PACKAGE_SYNCTHING BR2_PACKAGE_LOGITECHMEDIASERVER BR2_PACKAGE_BTRFS_PROGS
BR2_PACKAGE_HDDTEMP"

# special case, BR2_PACKAGE_OPENSSH is always defined, but BR2_PACKAGE_OPENSSH_SFTP
# if only defined in the base firmware, so create a dummy openssh package for this case
if grep -q '^BR2_PACKAGE_OPENSSH_SFTP=' .config; then
	BR2_PACKAGES="$BR2_PACKAGES BR2_PACKAGE_OPENSSH_EXTRA"
fi

BR2_PACKAGE_MDADM="usr/sbin/mdadm usr/sbin/mdmon etc/init.d/S29mdadm usr/www/cgi-bin/raid.cgi           usr/www/cgi-bin/raid_proc.cgi"
BR2_PACKAGE_DNSMASQ="etc/dnsmasq-opts etc/dnsmasq.conf etc/init.d/S42dnsmasq usr/www/dnsmasq_hlp.html usr/www/cgi-bin/dnsmasq.cgi usr/www/cgi-bin/dnsmasq_proc.cgi"
BR2_PACKAGE_WGET="usr/www/cgi-bin/proxy.cgi usr/www/cgi-bin/proxy_proc.cgi"
BR2_PACKAGE_RSYNC="etc/rsyncd.conf etc/rsyncd.secrets usr/www/cgi-bin/rsync.cgi usr/www/cgi-bin/rsync_proc.cgi usr/www/cgi-bin/rsyncd.cgi"
BR2_PACKAGE_MSMTP="etc/msmtprc usr/www/mail_hlp.html usr/www/cgi-bin/mail.cgi usr/www/cgi-bin/mail_proc.cgi"
#BR2_PACKAGE_NTP="etc/ntp.conf ./etc/init.d/S43ntp ./usr/www/cgi-bin/ntp.cgi ./usr/www/cgi-bin/ntp_proc.cgi"
BR2_PACKAGE_TRANSMISSION="etc/transmission etc/init.d/S81transmission usr/www/cgi-bin/transmission.cgi usr/www/cgi-bin/transmission_proc.cgi usr/www/transmission_hlp.html"
BR2_PACKAGE_AUTOMATIC="etc/init.d/S82automatic etc/automatic.conf usr/www/cgi-bin/automatic.cgi usr/www/cgi-bin/automatic_proc.cgi usr/www/automatic_hlp.html"
BR2_PACKAGE_USHARE="etc/init.d/S80ushare etc/ushare.conf usr/www/cgi-bin/ushare.cgi usr/www/cgi-bin/ushare_proc.cgi usr/www/ushare_hlp.html"
BR2_PACKAGE_MEDIATOMB="etc/init.d/S80mediatomb usr/www/cgi-bin/mediatomb.cgi usr/www/cgi-bin/mediatomb_proc.cgi usr/www/mediatomb_hlp.html"
BR2_PACKAGE_FUPPES="etc/fuppes etc/init.d/S80fuppes usr/www/cgi-bin/fuppes.cgi usr/www/cgi-bin/fuppes_proc.cgi usr/www/fuppes_hlp.html"
BR2_PACKAGE_MINIDLNA="etc/minidlna.conf etc/init.d/S80minidlna usr/www/cgi-bin/minidlna.cgi usr/www/cgi-bin/minidlna_proc.cgi usr/www/minidlna_hlp.html"
BR2_PACKAGE_MT_DAAPD="etc/mt-daapd.conf etc/mt-daapd.playlist etc/init.d/S80mt_daapd usr/www/cgi-bin/mt_daapd.cgi usr/www/cgi-bin/mt_daapd_proc.cgi usr/www/mt_daapd_hlp.html"
BR2_PACKAGE_FORKED_DAAPD="etc/forked-daapd.conf etc/init.d/S80forked_daapd usr/www/cgi-bin/forked_daapd.cgi usr/www/cgi-bin/forked_daapd_proc.cgi usr/www/forked_daapd_hlp.html"
BR2_PACKAGE_MPD="etc/mpd.conf etc/init.d/S81mpd"

BR2_PACKAGE_NUTS="etc/init.d/S22nut usr/www/cgi-bin/nut.cgi"
BR2_PACKAGE_CUPS="etc/init.d/S42cups usr/www/cgi-bin/cups.cgi"
BR2_PACKAGE_SAMBA_DOC="usr/swat/help/welcome.html"

BR2_PACKAGE_NTFS_3G_NTFSPROGS="usr/sbin/fsck.ntfs usr/sbin/fsck.ntfs-3g usr/sbin/mkfs.ntfs"

BR2_PACKAGE_DBUS="etc/init.d/S20dbus"
BR2_PACKAGE_POLIPO="etc/init.d/S45polipo"
BR2_PACKAGE_AVAHI="etc/avahi etc/init.d/S50avahi_daemon"
BR2_PACKAGE_NETATALK="etc/init.d/S51netatalk etc/afp.conf usr/www/cgi-bin/netatalk.cgi usr/www/cgi-bin/netatalk_proc.cgi"
BR2_PACKAGE_OPENSSH_EXTRA="etc/init.d/S62opensshd usr/www/cgi-bin/sshd.cgi usr/www/cgi-bin/sshd_proc.cgi usr/www/cgi-bin/opensshd.cgi"

BR2_PACKAGE_ISCSITARGET="etc/init.d/S64iscsitarget"
BR2_PACKAGE_LVM2_DEVICE_MAPPER="etc/init.d/S12device_mapper"
BR2_PACKAGE_LVM2="etc/init.d/S14lvm usr/www/cgi-bin/Disk_lvm.men usr/www/cgi-bin/lvm.cgi usr/www/cgi-bin/lvm_proc.cgi usr/www/lvm_hlp.html"
BR2_PACKAGE_CRYPTSETUP="etc/init.d/S14cryptsetup usr/www/cryptsetup_hlp.html usr/www/cgi-bin/Disk_cryptsetup.men usr/www/cgi-bin/cryptsetup.cgi usr/www/cgi-bin/cryptsetup_proc.cgi"
BR2_PACKAGE_STUNNEL="etc/stunnel etc/init.d/S41stunnel usr/www/cgi-bin/stunnel.cgi"
BR2_PACKAGE_OPENVPN="etc/openvpn etc/init.d/S41openvpn"
BR2_PACKAGE_PPTPD="etc/init.d/S41pptpd"
BR2_PACKAGE_QUOTA_TOOLS="etc/init.d/S19quota usr/www/cgi-bin/quota.cgi usr/www/cgi-bin/quota_proc.cgi usr/www/cgi-bin/Disk_quotas.men"
BR2_PACKAGE_KERNEL_MODULES="etc/init.d/S13modload"
BR2_PACKAGE_BTRFS_PROGS="etc/init.d/S14btrfs"

BR2_PACKAGE_LIGHTTPD="etc/init.d/S52lighttpd usr/www/cgi-bin/lighttpd.cgi
usr/www/cgi-bin/lighttpd_proc.cgi etc/lighttpd"

BR2_PACKAGE_PHP="etc/php.ini"

BR2_PACKAGE_MYSQL="etc/init.d/S44mysqld"

BR2_PACKAGE_SICKBEARD="etc/sickbeard etc/init.d/S81sickbeard usr/www/cgi-bin/sickbeard.cgi usr/www/cgi-bin/sickbeard_proc.cgi"
BR2_PACKAGE_SABNZBD="etc/sabnzbd etc/init.d/S81sabnzbd usr/www/cgi-bin/sabnzbd.cgi usr/www/cgi-bin/sabnzbd_proc.cgi"
BR2_PACKAGE_COUCHPOTATO="etc/couchpotato.conf etc/init.d/S81couchpotato usr/www/cgi-bin/couchpotato.cgi usr/www/cgi-bin/couchpotato_proc.cgi"
BR2_PACKAGE_COUCHPOTATO2="etc/couchpotato2.conf etc/init.d/S81couchpotato2 usr/www/cgi-bin/couchpotato2.cgi usr/www/cgi-bin/couchpotato2_proc.cgi"
BR2_PACKAGE_NZBGET="etc/nzbget.conf etc/nzbget-pp.conf usr/bin/nzbget-pp.sh etc/init.d/S81nzbget usr/www/cgi-bin/nzbget.cgi usr/www/cgi-bin/nzbget_proc.cgi" 
BR2_PACKAGE_NZBGETWEB="etc/nzbget-example.conf etc/nzbget-pp-example.conf"
BR2_PACKAGE_AMULE="etc/init.d/S81amule usr/www/cgi-bin/amule.cgi usr/www/cgi-bin/amule_proc.cgi"
BR2_PACKAGE_ARIA2="etc/aria2 etc/init.d/S81aria2 usr/www/cgi-bin/aria2.cgi usr/www/cgi-bin/aria2_proc.cgi"
BR2_PACKAGE_PYLOAD="etc/pyload etc/init.d/S81pyload usr/www/cgi-bin/pyload.cgi usr/www/cgi-bin/pyload_proc.cgi"
BR2_PACKAGE_SYNCTHING="etc/init.d/S81syncthing usr/www/cgi-bin/syncthing.cgi"
BR2_PACKAGE_LOGITECHMEDIASERVER="etc/init.d/S81lms usr/www/cgi-bin/lms.cgi usr/lib/lms/convert.conf usr/lib/lms/convert.conf-orig"

BR2_PACKAGE_HDDTEMP="etc/init.d/S20hddtemp"

for i in $BR2_PACKAGES; do
	if ! grep -q ^${i}= .config; then
		f="$(eval echo \$$i)"
		RMF="$RMF $f"
	fi
done

for i in $RMF; do rm -rf $1/$i; done

# 4-move some files to /usr, that will be lzma squashfs compressed
#
# as a matter of fact everything but busybox and libUclibc could be moved,
# because we are using aufs (squashfs is read-only, but aufs does COW to a tmpfs)

for i in $1/sbin/*; do
	if ! test -h $i; then
		mv $i $1/usr/sbin/
	fi
done

# 5-no kernel modules are needed at boot time, so move them to /usr/lib
# to squashfs-lzma them and save memory
if ! test -d $1/lib/modules -a -h $1/lib/modules; then
	cd $1
	rm -rf usr/lib/modules
	mv lib/modules usr/lib/
	cd lib
	ln -sf ../usr/lib/modules modules
fi

# 6- update etc/misc.conf with release date, so that only news and updated files after
# that date will be checked by the news.sh.

echo NEWS_CHK=$(date +%s) >> $1/etc/misc.conf
echo FILES_CHK=$(date +%s) >> $1/etc/misc.conf

# 7- remove hardcoded paths in pyton and perl scripts
for i in $(grep -rl '#![[:space:]]*'$HOSTDIR $ROOTFS); do
	sed -i "s|#![[:space:]]*$HOSTDIR|#!|" $i;
done
	

