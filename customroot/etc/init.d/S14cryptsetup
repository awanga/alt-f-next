#!/bin/sh

#set -x

DESC="Setup cryptographic volumes for dm-crypt/LUKS"
NAME=cryptsetup
REQUIRE="device_mapper"
TYPE=sys

CONFF=/etc/misc.conf

umask 077

. /etc/init.d/common

. $CONFF

iload() {
	require $NAME $REQUIRE
	st=0
	if ! lsmod | grep -q dm_crypt; then
		modprobe -q dm-crypt
		st=$?
		if test "$MODLOAD_CESA" = "y"; then
			modprobe -q crypto_hash
			modprobe -q marvell_cesa
		fi
	fi
}

iunload() {
	# removing modules recursively is unreliable, dont!
	# Also, dm_mod might be removed, even if in use by lvm
	mod="sha256_generic ansi_cprng krng eseqiv rng hmac sha1_generic marvell_cesa cryptomgr \
		crypto_hash aead pcompress aes_generic dm_crypt crypto_blkcipher crypto_algapi"
	for j in $(seq 1 3); do
		lsm=$(lsmod)
		for i in $mod; do
			if test "$(echo "$lsm" | awk '/^'$i'/{print $3}')" = 0; then
				rmmod $i
				mod=$(echo $mod | sed -n 's/'$i'//p')
			fi
		done
	done
	stoprequired $NAME $REQUIRE 
}

case "$1" in
	start)
		echo -n "Starting $NAME: "
		iload
		if test "$st" = 0 -a -f "$CRYPT_KEYFILE"; then
			for i in /dev/sd[a-z][1-9]; do
				dev=$(basename $i)
				if cryptsetup isLuks $i && test ! -b /dev/mapper/${dev}-crypt; then
					cryptsetup --key-file="$CRYPT_KEYFILE" luksOpen $i ${dev}-crypt
					st=$((st+$?))
				fi
			done
		fi
		omsg $st
		;;

	stop)
		echo -n "Stopping $NAME: "
		if ! dmstatus crypt; then
			omsg 0
			return 0
		fi

		st=0
		for i in /dev/sd[a-z][1-9]; do
			dev=$(basename $i)
			if test -z "$(cryptsetup isLuks $i 2>&1)" -a -b /dev/mapper/${dev}-crypt; then
				dm=${dev}-crypt
	
				# find device-mapper name under /dev, e.g. /dev/dm-3 
				eval $(dmsetup ls | awk '/'$dm'/{printf "mj=%d mi=%d", substr($2,2), $3}')
				eval $(awk '/'$mj' *'$mi'/{printf "tdm=%s", $4}' /proc/partitions)

				(cd /dev && ACTION=remove DEVTYPE=partition PWD=/dev MDEV=$tdm /usr/sbin/hot.sh)
				cryptsetup --key-file="$CRYPT_KEYFILE" luksClose $dm
				st=$((st+$?))
			fi
		done

		if test $st != 0; then
			omsg $st
			return 1
		fi

		iunload
		return 0
		;;

	status)
		if dmstatus crypt; then
			echo $NAME running
		else
			echo $NAME stopped
			return 1
		fi
		;;

	restart) restart $NAME ;;

	load) iload ;;

	unload) iunload ;;

	*)  usage $0 "start|stop|status|restart|load|unload" ;;
esac
