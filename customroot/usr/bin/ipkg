#!/bin/sh

CONFF=/etc/ipkg.conf
IPKG_DIR=/usr/lib/ipkg

usage() {
	echo "This is a frontend to ipkg. Use it always!
Usage:
	ipkg -install [<mount_point>]
	ipkg -clean
	ipkg -update
	ipkg -help
	ipkg standard ipkg command"
	if ! test -f //usr/bin/ipkg-cl; then
		echo -e "\nipkg is not installed, install using the webUI."
	fi
	exit 1
}

msg() {
	echo $1
	clean
	exit 1
}

clean() {
	if ! aufs.sh -s >& /dev/null; then
		return 0
	fi

	aufs.sh -n
	if test -f /usr/bin/ipkg-cl; then
		for i in $(ipkg-cl -V0 list_installed | cut -f1 -d" "); do
			if test "$i" != "ipkg"; then
				ipkg-cl -force-depends remove $i # >& /dev/null
			fi
		done
		ipkg-cl remove ipkg # >& /dev/null
	fi

	if ! aufs.sh -u >& /dev/null; then 
		echo "ipkg: can't umount aufs branch, stopping services and retrying..."
		rcall stop >& /dev/null
		# check during 10 seconds that they are indeed stopped
		# "rcall status" doesn't work cause of inetd, syslog and sysctrl 
		cnt=10; st=1
		while test "$st" = "1" -a "$cnt" != "0"; do
			st=0
			for i in $(ls -r /etc/init.d/S*) ;do
				bn=$(basename $i)
				nm=${bn:3}
				if test "$nm" = "inetd" -o "$nm" = "sysctrl" -o "$nm" = "syslog"; then continue; fi
				if rc$nm status >& /dev/null; then st=1; resilient=$nm; fi
			done
			usleep 200000
			cnt=$((cnt-1))
		done

		if test "$st" = 1; then
			echo "ipkg: at least service \"$resilient\" couldn'd be stopped"
		fi

		if ! aufs.sh -u >& /dev/null; then # no hope
			echo "ipkg: can't umount aufs branch, exiting."
			aufs.sh -r
			rcall start >& /dev/null
			exit 1
		fi
		rcall start >& /dev/null
	fi
	
	rm -rf $(readlink -f /Alt-F) /Alt-F
}

install() {
	echo Installing ipkg

	DESTD=$(awk '/^dest/{print $3}' $CONFF)

	if test "$DESTD" != "/Alt-F"; then
		msg "Package destination directory must be /Alt-F"
	fi

	if ! test -d "$DESTD"; then
		msg "Package destination directory not found."
	fi

	TMPD=$(mktemp -d -t)

	if test -e /tmp/ipkg_*_arm.ipk; then
		IPKG=$(basename /tmp/ipkg_*_arm.ipk)
		mv /tmp/$IPKG $TMPD
		local="yes"
	else
		while read type name feed; do
			if test "$type" != "src" -o -z "$feed"; then continue; fi
			host=$(echo $feed | sed -n 's|.*://\([^/]*\).*|\1|p')
			echo -n "Trying $host... "
			if ! nslookup $host >& /dev/null; then
				echo "fail, no such host."
				continue
			fi
			if ! wget -q $feed/Packages -P $TMPD; then
				echo "fail, no Packages file."
				continue
			fi
			if ! grep -q 'Package:[[:space:]]*ipkg' $TMPD/Packages; then
				rm $TMPD/Packages
				echo "fail, not a ipkg file."
				continue
			fi
			version=$(sed -n '/Package:[[:space:]]*ipkg/,/Package:/s/Version:[[:space:]]*\(.*\)/\1/p}' $TMPD/Packages)
			if ! wget -q -P $TMPD $feed/ipkg_${version}_arm.ipk; then
				rm $TMPD/Packages
				echo "fail, no ipkg_${version}_arm.ipk file."
				continue
			fi
			IPKG=ipkg_${version}_arm.ipk
			break
		done < $CONFF
	fi

	if ! test -e $TMPD/ipkg_*_arm.ipk; then
		rm -rf $TMPD
		msg "You don't seem to have enabled feeds,
a name server configured,
or a working internet connection,
and no /tmp/ipkg_*_arm.ipk file found. Exiting"
	fi

	cd $TMPD
	ar x $IPKG
	tar xzf control.tar.gz
	awk '/^Package:/ {
			if( $2 != "ipkg") exit 1 }
		/^Architecture:/ {
			if ($2 != "arm") exit 1 }
		' control
		
	if test $? != 0; then
		rm -rf $TMPD
		msg "Downloaded wrong package?"
	fi
	
	aufs.sh -n
	tar -C /Alt-F -xzf data.tar.gz
	mkdir -p /Alt-F/etc
	aufs.sh -r

	cd /
	rm -rf $TMPD

	# "FIXME: remount /Alt-F with inotify bellow makes 3.10.32/3.18.21 crash, the *first* time"
	mkdir -p /usr/lib/ipkg # this seems to solve the issue. Is it warming-up aufs?
	if test -z "$local"; then
		aufs.sh -n
		ipkg-cl update
		ipkg-cl install ipkg
		aufs.sh -r
	fi

	if test -s /etc/preinst.status; then
		cat /etc/preinst.status >> $IPKG_DIR/status
	fi

	cat /etc/Alt-F > $IPKG_DIR/.fixed

	exit 0
}

# remove installed packages of same or lower version than a existing pre-installed package.
# remove even if at the same version, as an on-disk version might have been installed
# (an upgraded version was released and installed and it is now available pre-installed)
ipkg_upgrade() {

	echo "ipkg: Firmware upgrade detected, fixing installed/pre-installed packages:"

	to_rm=""
	to_save=""

	while read pkg pver; do
		iver=$(awk '/Package:[[:space:]]*'$pkg'$/{getline; printf $2; exit 0}' $IPKG_DIR/status)
		echo $pkg:$pver:$iver:
		if test -n "$iver" -a -n "$pver"; then
			# return value from ipkg compare version is reversed,
			# and operator < equal to <=, > equal >=, use >>, <<

			uninst=""
			if ! ipkg-cl -V0 compare_versions "$pver" ">>" "$iver"; then
				echo uninstall $pkg $iver, $pver is pre-installed
				to_rm="$to_rm $pkg"
				uninst=y
			fi

			# on-disk pkg updated
			if ! ipkg-cl -V0 compare_versions "$pver" "=" "$iver"; then
				if test -f $IPKG_DIR/info/$pkg.list; then
					echo uninstall $pkg $iver, $iver is on-disk
					to_rm="$to_rm $pkg"
					uninst=y
				fi
			fi

			if test -n "$uninst" -a -f $IPKG_DIR/info/$pkg.conffiles; then
				to_save="$to_save $(cat $IPKG_DIR/info/$pkg.conffiles)"
			fi
		fi
	done < /etc/preinst

	#remove previous preinstalled packages that are not present anymore
	for i in $(ipkg -V0 status | awk '/Package/{print $2}'); do
		if ! test -f $IPKG_DIR/info/$i.control; then
			if ! grep -q $i /etc/preinst; then
				to_rm="$to_rm  $i"
			fi
		fi
	done

	# when removing, rc<service> links are removed, hot_aux recreates some
	if test -n "$to_rm"; then
		# backup conf files
		for i in $to_save; do cp /$i /$i.bck; done
		aufs.sh -n
		ipkg-cl -force-depends remove $to_rm
		ipkg-cl -force-depends remove $to_rm # dooh!
		aufs.sh -r
		# restore conf-files 
		for i in $to_save; do mv /$i.bck /$i; done
	fi

	if test -s /etc/preinst.status; then
		cat /etc/preinst.status >> $IPKG_DIR/status
	fi
}

if test "$#" != 0 -a "$1" = "-clean"; then
	clean

elif test "$#" != 0 -a "$1" = "-install"; then
	if test $# = 1 -a "$(aufs.sh -s)" != "OK"; then
		echo "/Alt-F does not exists or is not an aufs branch."
		echo "you must supply a mountpoint where to install ipkg."
		exit 1

	elif test $# = 1 -a "$(aufs.sh -s)" = "OK"; then
		install

	elif test $# = 2 -a "$(aufs.sh -s)" = "OK"; then
		echo "Alt-F already exists, you shouldn't supply a mountpoint."
		exit 1

	elif test "$#" != 2; then
		usage
	
	elif ! $(mountpoint -q $2); then
		echo "\"$2\" is not a mountpoint."
		exit 1

	else
		aufs.sh -i $2 && install
		exit $?
	fi

elif test "$#" != 0 -a "$1" = "-update"; then
	# this only needs to be done once for a new firmware upgrade
	if test "$(cat $IPKG_DIR/.fixed 2> /dev/null)" != $(cat /etc/Alt-F) ; then
		ipkg_upgrade
		cat /etc/Alt-F > $IPKG_DIR/.fixed
	fi

elif test "$#" != 0 -a "$1" = "-help"; then
	usage

elif test -f /usr/bin/ipkg-cl; then
	# removing a package if it is preinstalled requires ressurrecting/reinstalling it
	if echo $* | grep -q '[[:space:]]*remove[[:space:]]*'; then
		pkg=$(eval echo \$$#)   # assume pkg is last command argument
		# some packages have a rcscript, remake it if it exists
		if test -f /usr/lib/ipkg/info/$pkg.list && grep -q /etc/init.d/S.* /usr/lib/ipkg/info/$pkg.list; then
			rclink=$(grep -ho '/sbin/rc.*' /usr/lib/ipkg/info/$pkg.postrm 2> /dev/null)
		fi
	fi

	aufs.sh -n
	ipkg-cl $*
	res=$?
	aufs.sh -r

	if test -n "$pkg" -a -f /etc/preinst.status && grep -q "Package:[[:space:]]*$pkg$" /etc/preinst.status; then
		if test -n "$rclink"; then
			ln -sf /usr/sbin/rcscript $rclink
		fi
		sed -n "/Package: $pkg/,/^$/p" /etc/preinst.status >> /usr/lib/ipkg/status
	fi      

	exit $res

else
	usage
fi
